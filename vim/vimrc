set shell=/bin/bash
set modelines=0       " avoid security hole with running code on load
set nocompatible      " We're running Vim, not Vi!
execute pathogen#infect()

" map our prefix key to comma, and map \ back to the reverse character search,
" which is the default leader key
let mapleader = ','
nnoremap \ ,

set relativenumber
set number
set visualbell

" ruby fun
" quick enter for the ruby end block
" this may be replaced by tpope/vim-endwise
"imap <Leader><CR>    <CR><CR>end<Esc>-cc
"imap kk    <CR><CR>end<Esc>-cc

filetype plugin indent on    " enable smart filetype detection
":set mouse=a               " no mouse, it's actually just annoying
:filetype on                 " determine file type
:filetype plugin on          " honor settings in ~/.vim/ftplugin

:set expandtab               " insert spaces instead of tabs
:set shiftwidth=2
:set tabstop=2               " 2 spaces per tab
:set hidden                  " Allow to switch between windows when modified
:set laststatus=2            " always show the status window
:set autoindent
:set showmatch               " Show matching parens, etc.
:set ruler                   " show line/column in status bar

":set iskeyword+=:            " autocomplete perl modules with : in them

:set scrolloff=10           " keep at least 10 lines from the bottom/top

:set guifont=-schumacher-clean-medium-r-normal-*-*-120-*-*-c-*-koi8-r

" when using gf to jump to file under cursor, try with .rb extension
set suffixesadd+=.rb

set hlsearch                 " highlight search matches. Combine with * for quick visual find

" clear highlighting with CTRL-L redraw
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>


" toggle syntax hilighting with co;  another similar match to unimpaired
:noremap co; :if exists("syntax_on") <Bar> syntax off <Bar> else <Bar> syntax on <Bar> endif<CR>
:noremap c; :if exists("syntax_on") <Bar> syntax off <Bar> else <Bar> syntax on <Bar> endif<CR>


" toggle paste mode with cop similar to "change option" used elsewhere
:nmap cop :set paste!<CR>

syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

" regex handling. Make search work for normal regexes
" disabled. Causes more pain than good.
"nnoremap / /\v
"vnoremap / /\v

set ignorecase
set smartcase

" clean up trailing whitespace with \w
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" .md files should be markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown


set wildmenu          " show autocomplete commands
" make autocompletion work like the shell
:set wildmode=list:longest

:map <F2> :set nohls!<CR>:set nohls?<CR>   " toggle search highlighting
":map K !} fmt -72                        " wrap to 72 lines

" CTRL-J and CTRL-K to switch buffers, minimizing opposite one
":map <C-J> <C-W>j<C-W>_
":map <C-K> <C-W>k<C-W>_

"window navigation for the top three windows, leader 1 2 3
noremap <Leader>1  <C-w>t
noremap <Leader>2  <C-w>t<C-w>l
noremap <Leader>3  <C-w>t2<C-w>l

" CTRL-J and CTRL-K scroll down and up, with cursor in the center.
map <C-J> jzz
map <C-K> kzz

:nnoremap <buffer> <silent> E :cfix <Enter>

" use CTL-L to copy one word at a time.
:imap <C-L> @@@<ESC>hhkywjl?@@@<CR>P/@@@<CR>3s


" BEGIN PERL FUN
" should move this to a file-type plugin
:nnoremap <buffer> <silent> ,k :w<Enter>:!/usr/local/bin/perl -MVi::QuickFix -c %<Enter>
" ,f to reformat text with the autoformat command
:map ,f !perl -MText::Autoformat -e'autoformat' <CR>

" !f to create a new function header
:map !f o<CR><ESC>43i#<ESC>yypo}<CR><ESC>kkkosub  {<ESC>hi

" !F to create function header with pod
:nnoremap !F :r ~/docs/tmpl/perl_func<CR>V8j:s/FF/

" !m to a add a mutator function + header with pod
:nnoremap !m :r ~/docs/tmpl/mutator<CR>V/^}<CR>:s/FF/

" perltidy setup
nnoremap <silent> _t mx:%!perltidy-config-dirtree -q<Enter>'x
vnoremap <silent> _t mx:!perltidy-config-dirtree -q<Enter>'x

" perl -c
:nnoremap <buffer> <silent> _c :w<Enter>:!/usr/local/bin/perl -MVi::QuickFix -c %<Enter>
:nnoremap <buffer> <silent> _e :cf <Enter>

" END PERL FUN


" use ,# and ,$ to comment/uncomment lines in vmode
:vmap <LEADER># :s/^/#/<CR>
:vmap <LEADER>$ :s/^#//<CR>

" RUBY FUN
" use ri to get info on a function using the K key
:set keywordprg=ri

" map arrow keys to next and previous file
:nmap <DOWN> :next<CR>
:nmap <UP> :prev<CR>

" read and and write block of text between vim sessions
" Usage:
" `from' session:
"  ma
"  move to end-of-block
"  xww
"
" `to' session:
"  move to where I want block inserted
"   xrr
" xv to view the paste buffer
"
" There are three buffers available, the default, xrr and xww
" and then then /tmp/a and /tmp/b buffers:
" xra xrb => /tmp/a
" xwa xwb => /tmp/b
"
nnoremap xrr   :r ~/.vimxfer<Enter>
nnoremap xww   :'a,.w! ~/.vimxfer<Enter>
nnoremap xvv   :e ~/.vimxfer<Enter>
vnoremap xrr   c<esc>:r /homes/$USER/.vimxfer<Enter>
vnoremap xww   :w! ~/.vimxfer<Enter>

nnoremap xra   :r /tmp/a<Enter>
nnoremap xwa   :'a,.w! /tmp/a<Enter>
nnoremap xva   :e /tmp/a<Enter>
vnoremap xra   c<esc>:r /tmp/a<Enter>
vnoremap xwa   :w! /tmp/a<Enter>

nnoremap xrb   :r /tmp/b<Enter>
nnoremap xwb   :'a,.w! /tmp/b<Enter>
nnoremap xvb   :e /tmp/b<Enter>
vnoremap xrb   c<esc>:r /tmp/a<Enter>
vnoremap xwb   :w! /tmp/b<Enter>

" execute the /tmp/a buffer
nnoremap <leader>r! :r! bash /tmp/a<Enter>
vnoremap <leader>r! :w! /tmp/a<Enter>:r! bash /tmp/a<Enter>



" page like a pager
:nmap <Space> <PageDown>


" map jk to <esc> in insert mode. Save your fingers. Turn it off if you need
" to type jk for some reason. use jk instead of jj because in normal mode it
" will return you to the same spot, just in case you type it by mistake.
:inoremap jk <Esc>

" disable normal escape in insert mode to force me to learn the new way.
" :inoremap <esc> <noop>


" don't expand tabs in makefile
autocmd FileType make :set noexpandtab

" make tab semi-intelligent. Autocomplete at end of word
"inoremap <tab> <c-r>=InsertTabWrapper()<cr>
"function! InsertTabWrapper()
"     let col = col('.') - 1
"     if !col || getline('.')[col - 1] !~ '\k'
"         return "\<tab>"
"     else
"         return "\<c-n>"
"     endif
"endfunction

" After executing the following, you can search for a pattern then press F7 to fold misses.
":set foldexpr=getline(v:lnum)!~@/
":nnoremap <F7> :set foldmethod=expr<CR><Bar>zM

" don't join with double spaces
:set nojoinspaces

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" open new splits in a more natural way
set splitbelow
set splitright

"syntax checking
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_checker_args='--ignore=E501,W503'
"let g:syntastic_python_flake8_args='--ignore=E501,W507'

nnoremap <Leader>yc :SyntasticCheck<CR>
nnoremap <Leader>yt :SyntasticToggleMode<CR>


" now set it up to change the status line based on mode
if version >= 700
  au InsertEnter * hi StatusLine  ctermbg=Black ctermfg=Green  gui=undercurl guisp=Magenta
  au InsertLeave * hi StatusLine  ctermfg=LightGray ctermbg=Black gui=bold,reverse
  hi statusline guibg=green ctermfg=LightGray ctermbg=Black gui=bold,reverse
endif

"au InsertEnter * call InsertStatuslineColor(v:insertmode)
"au InsertLeave * hi statusline guibg=DarkGrey ctermfg=8 guifg=White ctermbg=15
"
"" default the statusline to green when entering Vim
"hi statusline guibg=DarkGrey ctermfg=8 guifg=White ctermbg=15
"
  
"------------ whitespace highlighting ---------"
" trailing whitespace highlighting
":highlight ExtraWhitespace ctermbg=darkgreen guibg=lightgreen
:highlight ExtraWhitespace term=standout ctermfg=15 ctermbg=1 guifg=White guibg=Red
:autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
:autocmd InsertLeave * match ExtraWhitespace /\s\+$/

" show trailing whitespace with cot (trailing)
nnoremap cot :match ErrorMsg /\v\s+$/<CR>
nnoremap coT :match<CR>

"" Show trailing whitespace and spaces before a tab:
":match ExtraWhitespace /\s\+$\| \+\ze\t/
"
"" Show tabs that are not at the start of a line:
":match ExtraWhitespace /[^\t]\zs\t\+/
"
"" Switch off :match highlighting.
":match
"
"" Show leading whitespace that includes spaces, and trailing whitespace.
":autocmd BufWinEnter * match ExtraWhitespace /^\s* \s*\|\s\+$/


" map some common 3-way diff merge options.
noremap <Leader>d1 :diffget LOCAL<CR>
noremap <Leader>d2 :diffget BASE<CR>
noremap <Leader>d3 :diffget REMOTE<CR>

" numbering commands ----------------------
nnoremap <Leader>n :call NumberToggle()<cr>
nnoremap <Leader>N :set nonumber<CR>:set norelativenumber<CR>
"autocmd InsertEnter * :set number | set norelativenumber
"autocmd InsertLeave * :set relativenumber

" number toggle between relative and absolute
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
    set number
  else
    set relativenumber
    set number
  endif
endfunc


" Copy/paste improvement

set pastetoggle=<leader>z

" paste from the system clipboard, avoiding need to toggle paste mode
noremap <Leader>pa "*p
vmap <C-c> :w !pbcopy<CR><CR> 

" copy to the system clipboard (the plus register)
noremap <Leader>cp "*y
vmap <C-x> :!pbcopy<CR>  
vmap <C-c> :w !pbcopy<CR><CR> 

" BEGIN airline setup ------------
let g:airline_theme='light'  " welcome to the light side

if !exists('g:airline_symbols')  " define var so we don't error out below
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '¬ª'
let g:airline_left_sep = '‚ñ∂'
let g:airline_right_sep = '¬´'
let g:airline_right_sep = '‚óÄ'
let g:airline_symbols.crypt = 'üîí'
"let g:airline_symbols.linenr = '‚êä'
"let g:airline_symbols.linenr = '‚ê§'
"let g:airline_symbols.linenr = '¬∂'
"let g:airline_symbols.maxlinenr = '‚ò∞'
"let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '‚éá'
"let g:airline_symbols.paste = 'œÅ'
"let g:airline_symbols.paste = '√û'
"let g:airline_symbols.paste = '‚à•'
"let g:airline_symbols.spell = 'Íû®'
"let g:airline_symbols.notexists = '‚àÑ'
"let g:airline_symbols.whitespace = 'Œû'

" END airline setup ------------
"

" fugitive git bindings
nnoremap <Leader>ga :Git add %:p<CR><CR>
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit -v -q<CR>
nnoremap <Leader>gt :Gcommit -v -q %:p<CR>
nnoremap <Leader>gd :Gvdiff<CR>
"switch back to current file and closes fugitive buffer
nnoremap <Leader>gD <c-w>h<c-w>c
nnoremap <Leader>ge :Gedit<CR>
nnoremap <Leader>gr :Gread<CR>
nnoremap <Leader>gw :Gwrite<CR><CR>
nnoremap <Leader>gp :Ggrep<Space>
nnoremap <Leader>gm :Gmove<Space>
"nnoremap <Leader>gb :Git branch<Space>
nnoremap <Leader>go :Git checkout<Space>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gps :Gpush<CR>
nnoremap <Leader>gpl :Gpull<CR>
"nnoremap <Leader>gb  :Git rebase<CR>
nnoremap <Leader>gf  :Git git fetch<CR>

nnoremap <Leader>gll :silent! Glog -100 -- %<CR>:bot copen<CR>  "sane number of versions, log patches
nnoremap <Leader>glf :silent! Glog -100<CR>:bot copen<CR>       "sane number of versions, log files

" fix gitv so that it opens with the diffs expanded.
augroup git
    au!
    autocmd FileType git :setlocal nofoldenable
augroup END

" quick save commands, use Leader-s in normal and insert
" note that you can use CTRL-O Leader-s in paste mode
nnoremap <leader>s :w<cr>
inoremap <leader>s <C-c>:w<cr>

nnoremap <Leader>tr :NERDTreeToggle<CR>
nnoremap <Leader>tf :NERDTreeFind<CR>

" toggle the tagbar
nnoremap <Leader>tt :TagbarOpenAutoClose<CR>
nnoremap <Leader>tT :TagbarToggle<CR>
nnoremap <Leader>tp :TagbarTogglePause<CR>


"CTRL-P bindings, use p prefix
nnoremap <Leader>pb :CtrlPBuffer<CR>
nnoremap <Leader>pt :CtrlPBufTag<CR>
nnoremap <Leader>pp :CtrlP<CR>
nnoremap <Leader>pm :CtrlPMRU<CR>
nnoremap <Leader>pr :CtrlPMRU<CR>

" format via black
nnoremap <Leader>bb :%!black -q -<CR>


" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'start'

" next and previous location bar entries (syntastic)
" TODO: unimpaired [q and ]q  are
noremap <Leader>eh :lfirst<CR>
noremap <Leader>ej :lnext<CR>
noremap <Leader>ek :lprev<CR>
noremap <Leader>eo :lopen<CR>
noremap <Leader>ec :lclose<CR>

" color scheme setup. Use H to toggle visible cursor column,
" and h to toggle cursor line highlighting
noremap <Leader>H :set cursorline! cursorcolumn!<CR>
noremap <Leader>h :set cursorline!<CR>

" ============== BEGIN COLOR ===============
"
" color scheme setup - this should be before
" other color customizations

"colorscheme MayanSmoke
colorscheme SummerFruit256

set cursorline
:hi CursorLine term=bold cterm=bold guibg=Grey20

" ============== END COLOR ===============

" upppercase the current word via CTRL-U
inoremap <C-u> <esc>bviwU<esc>ea

" Vimrc command to edit the vimrc file
"command! Vimrc :edit resolve(expand("~/.vimrc"))
command! Vimrc :tabedit ~/s/home_scripts/vim/vimrc
nnoremap <Leader>ve :Vimrc<CR>
nnoremap <Leader>vs :source $MYVIMRC<CR>

" write and source the current file. For vimscript creation.
inoremap <Leader>S <esc>:write<cr>:source %<cr>
nnoremap <Leader>S :write<cr>:source %<cr>

