[include]
  path = .gitconfig.local
[core]
  editor = vim
  excludesfile = ~/.gitignore
	autocrlf = input
[alias]
    st = status -s

    cl = clone

    ci = commit
    cv = commit -v
    cm = commit -m
    cma = commit -a -m
    ca = commit --amend
    amend = commit --amend
    caa = commit -a --amend -C HEAD

    ai = add --interactive

    co = checkout
    br = branch
    brn = branch --show-current
    brname = branch --show-current
    #"!git branch -ra | grep -v done"
    bra = branch -ra

    #list commands
    la = log --pretty=format:'"%h [%C(yellow)%cn%C(reset)] %s"'
    laa = log --pretty=format:'"%h [%C(yellow)%cn%C(reset)] %s >> %C(green)%d%C(reset)"'
    le = log --oneline --decorate
    ll = log --pretty='format:"%C(yellow)%h%C(brightred)%d %Creset%s%Cgreen [%cn] %cd"' --decorate --numstat
    lf = log --name-status --pretty=short --graph
    ls1 = log --pretty=format:'"%C(yellow)%h%C(brightred)%d %Creset%s%Cgreen [%cn]"' --decorate
    lds = log --pretty=format:'"%C(yellow)%h %C(green)%ad%C(brightred)%d %Creset%s%Cgreen [%cn]"' --decorate --date=short --graph
    ls = log --pretty=format:'"%C(green)%h %C(yellow)[%ad]%C(brightred)%d %Creset%s%C(cyan) [%cn]"' --decorate --date=relative
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    lnc = log --pretty=format:'"%h %s [%cn]"'

    # tree view commands, for null merge detection and other goodness
    ltree1 = log --graph --pretty='"format:%h parents=(%p) tree=%t %d %s"'
    ltree2 = log --graph --pretty='"format:%h parents=(%p) tree=%t %d %<(100,trunc)%s [%cn/%an] %crA"'
    ltree3 = log --graph --pretty='"format:%h parents=(%p) tree=%t %d %s [%cn]"'
    ltree4 = log --graph --topo-order --abbrev-commit --date=short --decorate --all --boundary --pretty=format:'"%Cgreen%ad %C(brightred)%h%Creset -%C(yellow)%d    %Creset %s %Cgreen[%cn]%Creset %C(magenta)%G?%Creset"'
    l1 = !git ltree1
    l2 = !git ltree2
    l3 = !git ltree3
    l4 =   !git ltree4

    logdate = log --pretty=format:'%h %cd [%an] %s' --graph --date=short
    logweek = log --pretty=format:'%h %cd [%an] %s' --graph --date=short --since=1.week
    logday = log --pretty=format:'%h %cd [%an] %s' --graph --date=relative --since=1.day

    # show tags + the commit hash. Useful if you've re-tagged
    tag-list = "show-ref --abbrev=7 --tags"

    #list all aliases
    aliases = "!git config -l | grep alias | cut -c 7-"

    mergetest = "!f(){ git merge --no-commit --no-ff \"$1\"; git merge --abort; echo \"Merge aborted\"; };f "

    diff = diff --word-diff
    d = diff --word-diff
    dc = diff --cached

    diffpush = "!f(){ git diff `git rev-parse --abbrev-ref --symbolic-full-name @{u}`; };f"
    diffpushf = "!f(){ git log --stat HEAD ^`git rev-parse --abbrev-ref --symbolic-full-name @{u}`; };f"

    #list modified files in last commit
    df = "!git ll -1"

    #diff last commit
    dlc = diff --cached HEAD^
    dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    #branch = branch -ra

    #reset commands
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard
    reset-remote = "!f() { git reset --hard origin/`git branch --show-current`;} ;f"


    #stash
    sl = stash list
    sa = stash apply
    ss = stash save

    cp = cherry-pick
    grep = grep -Ii
    gr = grep -Ii
    #grep from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

    #grep on filename
    f = "!git ls-files | grep -i"
    lol = log --oneline --graph --decorate

    # up = safe update. fast-forward only
    up = "!git remote update -p; git merge --ff-only @{u}"

    # reflog 
    reflog1 = reflog --pretty='%h %<|(20)%gd %cd | %gs'
    reflog2 = reflog --format='%C(auto)%h %gd %C(green)%>|(33)%cr%C(reset) | %gs (%s)'

    # hash
    shorthash = rev-parse --short HEAD


    ###  reviews, sumit-style

    # Quickly back up and put changes on the branch as local changees
    uncommit = reset --soft HEAD~1

    uncommitn = !sh -c 'git reset --soft HEAD~$1' -

    # USAGE: git review $LOCAL_BRANCH_NAME $MR_NUMBER
    review = !sh -c 'git fetch origin merge-requests/$2/head:review-$1 && git checkout review-$1' -

    # pretty print reflog with timestamp
    rl = reflog --pretty=reflog

[pretty]
    reflog = %C(auto)%h %<|(20)%gd %C(green)%cr%C(reset) %gs (%s)

[push]
  default = simple
  autoSetupRemote = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[difftool "meld"]
  trustExitCode = true
  cmd = open -W -a Meld --args \"$LOCAL\" \"$PWD/$REMOTE\"
[mergetool "meld"]
  trustExitCode = true
  cmd = open -W -a Meld --args --auto-merge \"$PWD/$LOCAL\" \"$PWD/$BASE\" \"$PWD/$REMOTE\" --output=\"$PWD/$MERGED\"
[rerere]
  enabled = true
[merge]
  tool = vimdiff
[diff]
  tool = vimdiff
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[init]
	defaultBranch = main
