#!/usr/bin/env python3
"""
compute the log of a sequence of numbers

This is particularly useful for pipelines to graph or
compute stats of numbers for applications (like yougraph)
that don't provide logarithm conversion.

EXAMPLES:

seq 10 | logn

seq 10 | logn --10
seq 10 | logn --2

seq 10 | logn -b 5


echo 0 | logn  # ERROR


"""


import argparse
import fileinput
import math
import sys

def calculate_log(value, base=None):
    try:
        number = float(value)
        if number <= 0:
            return "ERROR"
        if base == 10:
            return math.log10(number)
        elif base == 2:
            return math.log2(number)
        elif base is not None:
            return math.log(number, base)
        else:
            return math.log(number)
    except ValueError:
        return value


def main():
    parser = argparse.ArgumentParser(description="A CLI tool to calculate logarithms.")
    parser.add_argument('--10', action='store_true', help='Calculate log base 10')
    parser.add_argument('--2', action='store_true', help='Calculate log base 2')
    parser.add_argument('--base', '-b', type=float, help='Calculate log base n')
    parser.add_argument('files', nargs='*', help='input files. default is STDIN')

    args = parser.parse_args()

    base = None
    if args.__getattribute__('10'):
        base = 10
    elif args.__getattribute__('2'):
        base = 2
    elif args.base is not None:
        base = args.n

    for line in fileinput.input(args.files):
        line = line.strip()
        result = calculate_log(line, base)
        print(result)

if __name__ == "__main__":
    main()
