#!/usr/bin/env python3

from __future__ import print_function

import argparse
import copy
import logging
import os
import re
import string
import subprocess
import sys

DATA= """\
#!/usr/bin/env python
\"\"\"
NAME:

  $program:

DESCRIPTION:


AUTHOR:

  $author <$email>

EXAMPLES:

    # common usage:
    $program 

\"\"\"

from __future__ import print_function

import argparse
import json
import logging
import sys

TIMESTAMP_FORMAT='%(asctime)s %(levelname)s - %(message)s'

def parse_args(args=None):
    desc=""
    p = argparse.ArgumentParser(description=desc)
    #p.add_argument('', help="default: %(default)s", default='')
  
    # accept arguments as a param, so we
    # can import and run this module with a commandline-like
    # syntax.
    if args is None: 
        args = sys.argv[1:]
    return p.parse_args(args)

def run(opts):
    logging.debug("starting")

if __name__ == '__main__':
    opts = parse_args(sys.argv[1:])
    logging.basicConfig(level=logging.DEBUG,format=TIMESTAMP_FORMAT)
    run(opts)
"""

def parse_args(args=None):
    desc="Simple file template generator"
    p = argparse.ArgumentParser(description=desc)
    p.add_argument('--force', '-f', action='store_true',
        help='overwrite exisiting file'
    )
    p.add_argument('--home', '-H', action='store_true',
        help='use author.home and email.home instead of author and email')
    p.add_argument('outfile', help='path to output file')
    args = args or sys.argv[1:] 
    return p.parse_args()

def read_config(fh):
    """stupid key: val parser because there's no yaml parser
    in the python standard library
    """
    cfg = {}
    pattern = re.compile('^(\w+)\s*:\s*(\S.*)$')

    try:
      import yaml
      cfg = yaml.safe_load(fh.read())
    except ImportError:
      for line in fh:
          m = line.strip().search(pattern)
          if m:
              cfg[m.group(1)] = cfg.group(2)

    return(cfg)        

def homies(cfg, opts):
    cfg = copy.deepcopy(cfg)
    if opts.home:
        for k in ['author', 'email']:
            home_k = k + ".home"
            if home_k in cfg:
                cfg[k] = cfg[home_k]
    return cfg

def run(opts):
    config_file = os.path.expanduser('~/.pytmpl')
    try:
      vals = read_config(open(config_file))
    except FileNotFoundError:
      logging.warn("couldn't read config from %s. using empty defaults", config_file)
      vals = {'author': os.environ.get('USER', ''), 'email': ''}

    if opts.home:
        vals = homies(vals, opts)
    vals['program'] = os.path.splitext(os.path.basename(opts.outfile))[0]

    out = string.Template(DATA).substitute(vals)
    if os.path.exists(opts.outfile) and not opts.force:
        raise Exception("File exists: {}".format(opts.outfile))
    open(opts.outfile, 'w').write(out)
    subprocess.check_call(['chmod', '+x', opts.outfile])
    logging.info("Wrote %s", opts.outfile)

if __name__ == '__main__':
    opts = parse_args()
    logging.basicConfig(level=logging.DEBUG)
    run(opts)
