#!/usr/bin/env python
"""progress meter for pipes, printing to stderr every N lines

Insert progress into a pipeline, and get some feedback about
how quickly things are flowing through.

EXAMPLES:

# progress output to stderr, every 3 lines
# use descriptive number format
$ seq 3000000 | ./progress -n 1_000_000  | wc -l
  2017-11-17 16:03:35.402985 n=1,000,000 time=00:00:01.89 batch_secs=0.9 per_sec=1,118,957.6 bps=1,118,957.9
  2017-11-17 16:03:36.313580 n=2,000,000 time=00:00:02.80 batch_secs=0.9 per_sec=1,108,465.0 bps=1,098,273.4
  2017-11-17 16:03:37.191779 n=3,000,000 time=00:00:03.68 batch_secs=0.9 per_sec=1,118,361.8 bps=1,138,764.1
   3000000

# minimal output
$ seq 5000000 | ./progress -n 1_000_000  -q | wc -l
  line: 1,000,000
  line: 2,000,000
  line: 3,000,000
  line: 4,000,000
  line: 5,000,000
   5000000

AUTHOR:

 Jud Dagnall <jud@dagnall.net>


SEE ALSO:

* the pv linux command, e.g. pv -betlap
* perl -pE'say STDERR $. unless $. % 1_000_000'

"""

from __future__ import print_function

import argparse
import datetime
import fileinput
import logging
import re
import sys
import time

p = argparse.ArgumentParser(description='print progress every N lines')
p.add_argument('-n', '--numlines', 
        help='report progress e every n lines. Default: %(default)s', 
        default="1_000_000")
p.add_argument('-f', '--filter', action='store_true', 
	help='only print every nth line')
p.add_argument('-q', '--quiet', action='store_true', 
	help='minimal output')
p.add_argument('inputs', nargs='*', 
    help="input files or stdin. use -NNN to skip NNN lines, like head")
opts = p.parse_args()

# support number args like head, e.g. -1000
pattern = re.compile('-(\d+)')
inputs = []
for f in opts.inputs:
    m = pattern.match(f)
    if m:
        opts.numlines = m.group(1)
    else:
        inputs.append(f)

# support "_" in numbers, like 10_000_000
if opts.numlines:
    opts.numlines = int(str(opts.numlines).replace("_", ""))

batch_start = time.time()
start_ts = time.time()

for i, line in enumerate(fileinput.input(files=inputs), 1):
    if not opts.filter:
        sys.stdout.write(line)

    if i % opts.numlines == 0:

        # if we're filtering, print the nth line normally
        if opts.filter:
            sys.stdout.write(line)

        if opts.quiet:
            print("line: {:,}".format(i), file=sys.stderr)
        else:
            batch_secs = time.time() - batch_start
            batch_start = time.time() # reset
            total_secs = seconds=time.time() - start_ts

            m, s = divmod(round(total_secs), 60)
            h, m = divmod(m, 60)
            s += total_secs - int(total_secs)
            elapsed = "{:02d}:{:02d}:{:05.02f}".format(h,m,s)

            total_rate = i/total_secs
            batch_rate = opts.numlines/batch_secs

            ts = datetime.datetime.now().isoformat().replace('T', ' ')

            print("{} n={:,} t={} per_sec={:,.1f} batch_secs={:,.1f} batch_rate={:,.1f}".format(
                ts, i, elapsed, total_rate, batch_secs, batch_rate),
                file=sys.stderr)

