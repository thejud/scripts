#!/usr/bin/env python
"""trivial field extractor for json

This is intended to be used to trivially extract fields from json data.
TSV format is the default output format, but can be changed with the -s
nested json can be flattened, and nested levels are separated by _ or
the -d option.
jx also provide (basic) flattening 

jq is a much better alternative for many things, but it's quite verbose
to extract multiple fields from json as columns.

EXAMPLES:
    # field extraction
    $ echo '{"a": 1, "b": 2, "c":3}' | jx c a
    c	a
    3	1

    # no headers
    $ echo '{"a": 1, "b": 2, "c":3}' | jx -H c a
    3	1

    # flatten
    $ echo '{"a": {"b": 2, "c":3, "d":[5,6] }}' | jx -F a_c a_b
    a_c	a_b
    3	2

    # flatten with array indexing
    $ echo '{"a": {"b": 2, "c":3, "d": [7,10]}}' | jx -F a_c a_d_0
    a_c	a_d_0
    3	7

    # get field names from first line
    echo '{"a": 1, "b": 2, "c":3}' | jx --names
    a
    b
    c

    # alternate json level delimiter. Default is tab.
    $  echo '{"a": {"b": 2, "c":3, "d":[5,6] }}' | jx -F -d. a.c a.b
    a.c	a.b
    3	2
    
    # alternate output separator
    $ echo '{"a":1, "b": 2, "c":3}' | jx  -s '|'  a c
    a|c
    1|3

    # columnar output. Uses the linux `column` command
    $ printf '{"a": "foo", "b": 1}\n{"a":"loooooong", "b":2}' | jx -c
    foo        1
    loooooong  2



TODO:
    Add positional field extraction. Will require validation of fields on every
    line to match the first line to prevent silently dropping/munging columns

"""

from __future__ import print_function
import argparse
import fileinput
import json
import logging
import subprocess
import sys

class Flattener:
    def __init__(self, delimiter="_"):
        self.delimiter = delimiter

    def flatten(self, data, out=None, prefix=None):
        out = {} if out is None else out
        prefix = [] if prefix is None else prefix

        if isinstance(data, dict):
            for k,value in data.items():
                self.flatten(value, out, prefix + [k])
        elif isinstance(data, list):
            for counter, value in enumerate(data):
                self.flatten(value, out, prefix + [counter])
        else:
            key = self.delimiter.join([str(s) for s in prefix])
            logging.debug(f"writing {data} to {key}")
            out[key] = data
        return out

class ColumnPrinter:
    def __init__(self):
        self.rows = []

    def print(self, columns):
        self.rows.append(columns)

    def flush(self):
        # https://stackoverflow.com/a/12065663
        widths = [max(map(len, col)) for col in zip(*self.rows)]
        for row in self.rows:
            print("  ".join((val.ljust(width) for val, width in zip(row,
                widths))))


class JoiningPrinter:
    def __init__(self, delimiter):
        self.delimiter=delimiter

    def print(self, columns):
        print(self.delimiter.join(columns))

def parse_args():
    parser = argparse.ArgumentParser("jsoncut - extract simple fields from json")
    parser.add_argument('--flatten', '-F', action='store_true',
            help='flatten json before selecting'
    )
    parser.add_argument('--column', '-c', action='store_true',
            help='column output')
    parser.add_argument('--delimiter', '-d',
            help='delimiter for json levels, default is %(default)',
            default='_'
    )
    parser.add_argument('--separator', '-s',
            help='delimiter for json fields, default is "\t"',
            default="\t"
    )
    parser.add_argument('--headers', '-H', action='store_true',
            help="skip header printng"
    )

    parser.add_argument('--names', '-n', action='store_true',
            help='show column names from initial object and exit'
    )

    parser.add_argument('fields', nargs="*",
            help="list of field names to extract")

    return parser.parse_args()

def run():
    opts = parse_args()
    out=sys.stdout
    if opts.column:
        printer = ColumnPrinter()
    else:
        printer = JoiningPrinter(opts.separator)

    flattener = Flattener(delimiter=opts.delimiter)

    if opts.fields and not opts.headers:
        printer.print(opts.fields)

    for line in sys.stdin:
        data = json.loads(line.strip())
        if opts.flatten:
            data = flattener.flatten(data)
        if opts.names:
            for k in data.keys():
                print(k)
            return
        logging.debug(data.keys())

        # if we have a list of fields, use them. Otherwise, print all keys
        fields = [ str(data.get(f, "")) for f in opts.fields or data.keys()]

        logging.debug(fields)
        printer.print(fields)

    printer.flush()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    run()
