#!/usr/bin/env ruby
# convert to/from unix epoch seconds and milliseconds
#
# unixtime will parse the input, treating input with all digits as
# a seconds (or milliseconds, determined by length) since the epoch value.
#
# non-epoch input will be parsed as a date string.
#
# WARNING: date strings without a timezone will be treated
# as UTC.
#
#
# EXAMPLES:
#
#   # output the current time in epoch seconds
#   unixtime
#
#   # current time in epoch milliseconds
#   unixtime -m
#
#   # convert epoch to a datestring, localtime
#   unixtime 1512238655
#
#   # convert epoch to a UTC datestring
#   unixtime -u 1512238655
#
#   # multiple times, autodetect
#   unixtime 1512238655 1512238656001
#
#   # read from stdin
#   echo 1512238655 | unixtime -f
#
#   # read and filter from file(s)
#   unixtime -f f1 f2 f3
#
#   # Filter mode:
#   #  detect long sequences of digits in the input
#   #  and treat it either as a unix timestamp, or a java
#   #  timestamp (milliseconds since the epoch)
#   echo "foo 1512238655 bar" | unixtime -f
#
#   echo "foo 1512238655 bar" | unixtime -f
#
#   # string to epoch seconds
#   # TODO: NOT WORKING 2024-08-14
#   date | unixtime -f
#
#   unixtime '2017-01-01T12:23:14Z'
#
# Note that this uses ruby because it has one of the more robust
# date parsing libraries as part of the standard library, without
# installing additional package. Unfortunately, timezone management
# is not included. F


require 'date'
require 'optparse'

def parse(s, opts)

  # TODO: Need to give this more thought to be more
  # precise on the digit detection. Could potentially
  # limit by milli or non-milli mode, as it is uncommon
  # to want to parse BOTH within the same dataset.
  match = /(?:\D|^)(\d{9,15})(?:\D|$)/.match(s)
  if !match
    if opts[:filter]
      puts s
    else
      puts DateTime.parse(s).strftime(opts[:fmt])
    end
    return
  end

  timet = match[0]
  if timet.size >= 12 or opts[:resolution] == 1000
    t = timet.to_i/1000.0  # milliseconds
  else
    t = timet.to_f
  end
  out = opts[:utc] ? Time.at(t).utc : Time.at(t)

  if opts[:resolution] > 1
    out = out.strftime('%F %T.%L %z')
  else
    out = out.to_s
  end

  if opts[:filter]
    puts s.sub(timet, out)
  else
    puts out
  end

end

opts = {resolution: 1, fmt: '%s'}
OptionParser.new do |o|
  o.banner = "USAGE: #{File.basename($0)} [options] {- | (date|unixtime)... }"
  o.on('--utc', '-u', 'UTC output') do
    opts[:utc] = true
  end
  o.on('--millis', '-m', 'millisecond input/output') do
    opts[:resolution] = 1000
    opts[:fmt] = '%Q'
  end
  o.on('--filter', '-f', 'replace all long digit sequences in input') do
    opts[:filter] = true
  end
end.parse!

if ARGV.empty? and not opts[:filter]
  puts DateTime.now.strftime(opts[:fmt])
  exit 0
end

# trigger filter mode with '-'
if ARGV[0] == '-' or opts[:filter]
    ARGV.shift
    vals = ARGF.readlines
else
  vals = ARGV
end

vals.each do |v|
  parse(v, opts)
end
